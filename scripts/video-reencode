#!/bin/bash

# Define the output path for the re-encoded files and the log file
output_path="/tmp/reencode"
LOGFILE="/tmp/reencode.log"
mkdir -p "$output_path"

# Log starting message
echo "Starting reencode..." | tee -a "$LOGFILE"

# Check if video files are provided as arguments, otherwise exit
if [ "$#" -eq 0 ]; then
    echo "No video files provided. Please provide video files as arguments."
    exit 1
fi

# Function to display progress
show_progress() {
    printf "\rProcessing: %d/%d" "$1" "$2"
}

# Function for logging with timestamp
log() {
    echo "[$(date '+%H:%M')] $1" >> "$LOGFILE"
}

# Total number of files to process
total_files=$#
current_file=0

# Iterate over all video files passed as arguments
for file in "$@"; do
    # Check if the file exists and is a valid file
    if [ ! -e "$file" ] || ! ffmpeg -v error -i "$file" &>/dev/null; then
        log "ERROR: '$file' does not exist or is not a valid video file. Skipping."
        continue
    fi

    # Increment the current file counter
    ((current_file++))

    # Define the output file path in the output directory (output re-encoded file will be in .MOV format)
    output_reencoded="$output_path/$(basename "${file%.*}").MOV"

    # Print progress
    show_progress "$current_file" "$total_files"

    # Re-encode the file using FFmpeg
    ffmpeg -loglevel quiet -i "$file" -vf "setpts=PTS-STARTPTS" -af "asetpts=PTS-STARTPTS" -c:v libx264 -c:a aac "$output_reencoded" >> "$LOGFILE" 2>&1

    # Check if the re-encoding was successful
    if [ $? -eq 0 ]; then
        echo -e "\nSuccessfully re-encoded: $file -> $output_reencoded" | tee -a "$LOGFILE"
    else
        echo -e "\nFailed to re-encode: $file. See the log for details." | tee -a "$LOGFILE"
    fi
done

# Print completion message
echo "All files processed: $current_file/$total_files completed.\nSee $output_path" | tee -a "$LOGFILE"
