#!/bin/bash

# Set the log file
LOGFILE="/tmp/images_integrity_check.log"
echo "Starting integrity check..." > "$LOGFILE"

# Helper function for logging with timestamp
log() {
    echo "[$(date '+%H:%M')] $1" >> "$LOGFILE"
}

# List of required programs
REQUIRED_PROGRAMS=("exiftool" "jpeginfo" "pngcheck" "heif-info" "dwebp" "dcraw" "ffmpeg")

log "Checking for dependencies..."
for prog in "${REQUIRED_PROGRAMS[@]}"; do
    if ! command -v "$prog" &> /dev/null; then
        log "ERROR: Required program '$prog' is not installed."
        exit 1
    fi
done

# Function to display progress
show_progress() {
    local current=$1
    local total=$2
    printf "\rProcessing: %d/%d" "$current" "$total"
}

# Function for checking ExifTool
check_exiftool() {
    log "Checking files with ExifTool..."
    ERROR_PATTERN='File format error|Corrupted data|Processing failed'
    files=($(find . -type f))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        exiftool "$file" > /dev/null 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking JPEG and JPG files
check_jpeg() {
    log "Checking JPEG and JPG files..."
    ERROR_PATTERN='ERROR'
    files=($(find . -type f \( -iname "*.jpeg" -o -iname "*.jpg" \)))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        jpeginfo -c "$file" 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking PNG files
check_png() {
    log "Checking PNG files..."
    ERROR_PATTERN='CRC error|zlib error|inflate error|Corrupt data|invalid'
    files=($(find . -iname "*.png"))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        pngcheck -v "$file" 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking HEIC files
check_heic() {
    log "Checking HEIC files..."
    ERROR_PATTERN='Error|Invalid|Unsupported|Corrupt'
    files=($(find . -iname "*.heic"))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        heif-info "$file" 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking WEBP files
check_webp() {
    log "Checking WEBP files..."
    ERROR_PATTERN='Decode error|Error|Corrupt'
    files=($(find . -iname "*.webp"))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        dwebp "$file" -o /dev/null 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking DNG files
check_dng() {
    log "Checking DNG files..."
    ERROR_PATTERN='Cannot decode|Invalid|Corrupted'
    files=($(find . -iname "*.dng"))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        dcraw -i "$file" 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function for checking MP4, MOV, and 3GP video files
check_video() {
    log "Checking MP4, MOV, and 3GP video files..."
    ERROR_PATTERN='Invalid data|corrupt|Error while decoding|moov atom not found'
    files=($(find . -type f \( -iname "*.mp4" -o -iname "*.mov" -o -iname "*.3gp" \)))
    total=${#files[@]}
    current=0
    for file in "${files[@]}"; do
        ((current++))
        show_progress "$current" "$total"
        ffmpeg -v error -i "$file" -f null - 2>&1 | grep -Ei "$ERROR_PATTERN" | while read -r line; do
            printf "[File: %s] %s\n" "$file" "$line" >> "$LOGFILE"
        done
    done
    echo
}

# Function to display the help screen
display_help() {
    echo "Usage: $0 [function_name]"
    echo "Available functions:"
    echo "  check_exiftool   - Check EXIF tool integrity"
    echo "  check_jpeg       - Check JPEG and JPG files"
    echo "  check_png        - Check PNG files"
    echo "  check_heic       - Check HEIC files"
    echo "  check_webp       - Check WEBP files"
    echo "  check_dng        - Check DNG files"
    echo "  check_video      - Check MP4, MOV, and 3GP video files"
    echo "  all              - Run all checks"
}

# Check if any arguments are provided
if [ "$#" -eq 0 ]; then
    display_help
else
    # If arguments are provided, run only those functions
    for func in "$@"; do
        if declare -f "$func" > /dev/null; then
            "$func"
        elif [ "$func" == "all" ]; then
            # Run all functions if "all" is passed
            check_exiftool
            check_jpeg
            check_png
            check_heic
            check_webp
            check_dng
            check_video
        else
            log "ERROR: Function '$func' not found."
            display_help
        fi
    done
fi

# Summary of issues found
log "Integrity check completed. Review the log file: $LOGFILE"
