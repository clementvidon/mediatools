#!/bin/bash

###############################################################################
# 1) Script Information
###############################################################################
# @author       clemedon (Clément Vidon)
# @brief        Prune exifs data and rename files based on creation date, file size, and a user-defined prefix
# @usage        ./media-rename -dir="DIR_PATH" -prefix="MYPREFIX" -ext="EXTENSION"
# @dependency   Requires exiftool

###############################################################################
# 2) Validate exiftool installation
###############################################################################
if ! command -v exiftool &> /dev/null; then
    echo "exiftool is required but not installed. Please install it and try again."
    exit 1
fi

###############################################################################
# 3) Determine stat command and date formatting based on the OS
###############################################################################

OS_NAME=$(uname)

if [[ "$OS_NAME" == "Darwin" ]]; then
    STAT_CMD="stat -f%z"
elif [[ "$OS_NAME" == "Linux" ]]; then
    STAT_CMD="stat -c%s"
else
    echo "Unsupported operating system."
    exit 1
fi

format_touch_date() {
    input="$1"
    if [[ "$OS_NAME" == "Darwin" ]]; then
        date -j -f "%Y:%m:%d %H:%M:%S" "$input" +"%Y%m%d%H%M.%S"
    else
        date_part="${input%% *}"
        time_part="${input##* }"
        date_part_clean="${date_part//:/-}"
        reformatted="${date_part_clean} ${time_part}"
        date -d "$reformatted" +"%Y%m%d%H%M.%S"
    fi
}

###############################################################################
# 4) Parse flag-style parameters
###############################################################################
usage() {
    echo "USAGE"
    echo "         $0 -dir=PATH_TO_DIRECTORY -ext=TARGET_FILES_EXTENSION -prefix=NAME_PREFIX"
    echo "EXAMPLE"
    echo "         $0 -dir=. -ext=dng -prefix=GR3_CV"
    echo "INFO"
    echo "         -ext= is case insensitive"
    exit 1
}

# Initialize variables
target_dir=""
extension=""
prefix=""

# Parse each argument
while [[ $# -gt 0 ]]; do
    case "$1" in
        -dir=*)
            target_dir="${1#*=}"
            ;;
        -ext=*)
            extension="${1#*=}"
            ;;
        -prefix=*)
            prefix="${1#*=}"
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
    shift
done

# Validate required arguments
if [ -z "$target_dir" ] || [ -z "$prefix" ] || [ -z "$extension" ]; then
    usage
fi

###############################################################################
# 5) Prepare logging and undo script
###############################################################################
log_date=$(date +"%y%m%d%H%M%S")
log_file="/tmp/media-rename_${log_date}.log"
undo_script="/tmp/media-rename-undo-$log_date.sh"
echo "# ---------- $log_date ----------" >> "$undo_script"
chmod +x "$undo_script"

###############################################################################
# 6) Build find command for the single mandatory extension
###############################################################################
extension="${extension,,}"
find_cmd="find \"$target_dir\" -maxdepth 1 -type f ! -name '.*' -iname \"*.$extension\" -print0"

###############################################################################
# 7) Execute find command and collect files
###############################################################################
file_list=()
while IFS= read -r -d '' file; do
    file_list+=("$file")
done < <(eval "$find_cmd")

###############################################################################
# 8) Main loop: metadata clean + set, THEN compute and rename
###############################################################################
total_files=${#file_list[@]}
processed=0
success=0
failures=0

print_failure() {
    echo -e "\033[31m$1\033[0m"
}

for f in "${file_list[@]}"; do
    ((processed++))
    basename_f=$(basename "$f")

    # Skip unreadable, empty, or non-writable files
    if [ ! -r "$f" ] || [ ! -s "$f" ] || [ ! -w "$f" ]; then
        ((failures++))
        print_failure "$processed/$total_files failure: '$basename_f' is unreadable, empty, or not writable"
        continue
    fi

    # Extraire la date EXIF (au format yymmddHHMMSS)
    date_tags=("DateTimeOriginal" "CreateDate" "MediaCreateDate" "FileCreateDate" "ModifyDate")
    exif_date=""
    for tag in "${date_tags[@]}"; do
        source_tag="$tag"

        val=$(exiftool -m -s3 -$tag -d "%y%m%d%H%M%S" "$f" 2>>"$log_file")
        if [ $? -ne 0 ]; then
            ((failures++))
            print_failure "$processed/$total_files failure: exiftool read failed for '$basename_f'"
            continue
        fi
        if [[ "$val" =~ ^[0-9]{12}$ ]] && [[ "$val" != "000000000000" ]]; then
            exif_date="$val"
            break
        fi
    done

    # Fallback sur file mtime si aucune date trouvée (date_tags order or priority)
    if [ -z "$exif_date" ]; then
        if [[ "$OS_NAME" == "Darwin" ]]; then
            file_epoch=$(stat -f "%m" "$f")
        else
            file_epoch=$(stat -c "%Y" "$f")
        fi
        exif_date=$(date +"%y%m%d%H%M%S" -d "@$file_epoch")
        source_tag="file_mtime"
    fi

    # Formatte la date pour EXIF (YYYY:MM:DD HH:MM:SS)
    year="20${exif_date:0:2}"
    month="${exif_date:2:2}"
    day="${exif_date:4:2}"
    hour="${exif_date:6:2}"
    min="${exif_date:8:2}"
    sec="${exif_date:10:2}"
    formatted_date="${year}:${month}:${day} ${hour}:${min}:${sec}"

    # Nettoie le nom original pour metadata
    sanitized_name="$(echo "$basename_f" \
        | tr -cd '[:print:]' \
        | tr '\t' ' ' \
        | sed 's/[^a-zA-Z0-9._-]/_/g' \
        | cut -c1-200)"

    # Vérifie si UserComment existe déjà (évite de l'écraser à chaque fois)
    if ! exiftool -UserComment "$f" 2>/dev/null | grep -q "originalfilename"; then
        exiftool -overwrite_original \
            -trailer:all= \
            -UserComment="originalfilename_$(date +%y%m%d)=$sanitized_name" \
            -DateTimeOriginal="$formatted_date" \
            -CreateDate="$formatted_date" \
            -FileCreateDate="$formatted_date" \
            -ModifyDate="$formatted_date" \
            -TrackCreateDate="$formatted_date" \
            -TrackModifyDate="$formatted_date" \
            -MediaCreateDate="$formatted_date" \
            "$f" >>"$log_file" 2>&1

            if [ $? -ne 0 ]; then
                ((failures++))
                print_failure "$processed/$total_files failure: exiftool metadata update failed for '$basename_f'"
                continue
            fi

    else
        exiftool -overwrite_original \
            -trailer:all= \
            -DateTimeOriginal="$formatted_date" \
            -CreateDate="$formatted_date" \
            -FileCreateDate="$formatted_date" \
            "$f" > /dev/null 2>&1
    fi

    # Calcul du nom FINAL (après toutes les modifs metadata !)
    ext="${f##*.}"
    bytes=$(printf "%08d" "$($STAT_CMD "$f")")
    newfile="$target_dir/${prefix}${exif_date:0:2}_${exif_date:2:2}${exif_date:4:2}_${exif_date:6:6}_${bytes}.${ext^^}"

    # Si déjà au bon nom, skip
    if [ "$(realpath "$f")" == "$(realpath "$newfile")" ]; then
        echo "$processed/$total_files already named '$newfile'"
        ((success++))
        continue
    fi

    # Si fichier cible existe déjà (collision)
    if [ -e "$newfile" ]; then
        ((failures++))
        print_failure "$processed/$total_files failure: target file '$newfile' already exists"
        continue
    fi

    # Renomme
    if mv -v "$f" "$newfile" &>>"$log_file"; then
        echo "$processed/$total_files success: created '$newfile' from '$basename_f'"

        # --- Harmonise TrackCreateDate / TrackModifyDate ---
        exiftool -overwrite_original \
            -TrackCreateDate="$formatted_date" \
            -TrackModifyDate="$formatted_date" \
            -MediaCreateDate="$formatted_date" \
            -MediaModifyDate="$formatted_date" \
            "$newfile" >>"$log_file" 2>&1

        if [ $? -ne 0 ]; then
            ((failures++))
            print_failure "$processed/$total_files failure: exiftool metadata update failed for '$newfile'"
            continue
        fi

        # --- Remet File Modification Date au formatted_date ---
        # Conversion en format attendu par `touch`
        touch_date=$(format_touch_date "$formatted_date")
        touch -a -m -t "$touch_date" "$newfile"

        echo "mv -v \"$newfile\" \"$f\"" >> "$undo_script"
        ((success++))
    else
        ((failures++))
        print_failure "$processed/$total_files failure: could not rename '$basename_f'"
    fi
    echo "$processed/$total_files - $basename_f: date source = $source_tag" >> "$log_file"
done

###############################################################################
# 10) Summary
###############################################################################
echo "Renaming complete: $success successful, $failures failed."
echo "See logs in: $log_file"
